import * as THREE from 'three';
import { GLTFLoader } from "./three/examples/jsm/loaders/GLTFLoader.js";
import { TANKTYPE } from './utils.js';

class ModelLoader {
    static instance;
    
    constructor() {
        if (ModelLoader.instance) {
            return ModelLoader.instance;
        }
        ModelLoader.instance = this;
        
        this.loader = new GLTFLoader();
        this.modelCache = new Map(); // Cache cho models ƒë√£ load
        this.loadingPromises = new Map(); // Track loading promises
        this.isPreloaded = false;
    }

    /**
     * Preload t·∫•t c·∫£ models khi kh·ªüi ƒë·ªông game
     * @returns {Promise<boolean>} - Promise resolve khi t·∫•t c·∫£ models ƒë√£ load xong
     */
    async preloadAllModels() {
        console.log("üöÄ B·∫Øt ƒë·∫ßu preload t·∫•t c·∫£ models...");
        
        const loadPromises = [];
        
        // Load t·∫•t c·∫£ tank models
        Object.values(TANKTYPE).forEach(tankType => {
            if (tankType.assetPathGLTF) {
                const promise = this._loadModel(tankType.assetPathGLTF, `tank_${tankType.name}`);
                loadPromises.push(promise);
            }
        });
        
        // Load rock models
        const rockTypes = ['rock09', 'rock13'];
        rockTypes.forEach(rockType => {
            const promise = this._loadModel(`./assets/${rockType}/${rockType}.gltf`, `rock_${rockType}`);
            loadPromises.push(promise);
        });
        
        // Load tree models
        const treeTypes = ['tree01'];
        treeTypes.forEach(treeType => {
            const promise = this._loadModel(`./assets/${treeType}/${treeType}.gltf`, `tree_${treeType}`);
            loadPromises.push(promise);
        });
        
        // Load barrel model (n·∫øu c√≥)
        const additionalModels = [
            { path: './assets/barrel/barrel.gltf', key: 'barrel' }
        ];
        
        additionalModels.forEach(({ path, key }) => {
            const promise = this._loadModel(path, key).catch(err => {
                console.warn(`‚ö†Ô∏è Kh√¥ng th·ªÉ load model ${key}:`, err.message);
                return null; // Kh√¥ng fail to√†n b·ªô qu√° tr√¨nh preload
            });
            loadPromises.push(promise);
        });
        
        try {
            await Promise.all(loadPromises);
            this.isPreloaded = true;
            console.log("‚úÖ Preload t·∫•t c·∫£ models th√†nh c√¥ng!");
            console.log(`üì¶ ƒê√£ cache ${this.modelCache.size} models trong RAM`);
            return true;
        } catch (error) {
            console.error("‚ùå L·ªói khi preload models:", error);
            return false;
        }
    }

    /**
     * Load m·ªôt model t·ª´ file path v√† cache n√≥
     * @private
     * @param {string} path - ƒê∆∞·ªùng d·∫´n ƒë·∫øn file model
     * @param {string} cacheKey - Key ƒë·ªÉ cache model
     * @returns {Promise<THREE.Group>} - Promise resolve v·ªõi model ƒë√£ load
     */
    async _loadModel(path, cacheKey) {
        // N·∫øu ƒë√£ c√≥ trong cache, return cached version
        if (this.modelCache.has(cacheKey)) {
            return this.modelCache.get(cacheKey);
        }
        
        // N·∫øu ƒëang load, return existing promise
        if (this.loadingPromises.has(cacheKey)) {
            return this.loadingPromises.get(cacheKey);
        }
        
        const loadPromise = new Promise((resolve, reject) => {
            this.loader.load(
                path,
                (gltf) => {
                    const model = gltf.scene;
                    
                    // Setup shadows cho t·∫•t c·∫£ mesh trong model
                    model.traverse((child) => {
                        if (child.isMesh) {
                            child.castShadow = true;
                            child.receiveShadow = true;
                            
                            // Log texture info
                            if (child.material && child.material.map) {
                                console.log(`‚úÖ Texture loaded for ${cacheKey}:`, child.material.map);
                            } else if (child.material) {
                                console.warn(`‚ö†Ô∏è Missing texture for ${cacheKey}:`, child.name);
                            }
                        }
                    });
                    
                    // Cache model
                    this.modelCache.set(cacheKey, model);
                    this.loadingPromises.delete(cacheKey);
                    
                    console.log(`üì¶ Cached model: ${cacheKey}`);
                    resolve(model);
                },
                (progress) => {
                    // Progress callback (optional)
                    const percent = (progress.loaded / progress.total * 100).toFixed(1);
                    console.log(`üì• Loading ${cacheKey}: ${percent}%`);
                },
                (error) => {
                    this.loadingPromises.delete(cacheKey);
                    console.error(`‚ùå Failed to load ${cacheKey}:`, error);
                    reject(error);
                }
            );
        });
        
        this.loadingPromises.set(cacheKey, loadPromise);
        return loadPromise;
    }

    /**
     * L·∫•y clone c·ªßa tank model t·ª´ cache
     * @param {Object} tankType - TANKTYPE object
     * @param {THREE.Vector3} position - V·ªã tr√≠ ƒë·∫∑t tank
     * @returns {THREE.Group|null} - Clone c·ªßa tank model ho·∫∑c null n·∫øu ch∆∞a load
     */
    getTankModel(tankType, position = new THREE.Vector3(0, 0, 0)) {
        const cacheKey = `tank_${tankType.name}`;
        
        if (!this.modelCache.has(cacheKey)) {
            console.error(`‚ùå Tank model ${tankType.name} ch∆∞a ƒë∆∞·ª£c preload!`);
            return null;
        }
        
        const originalModel = this.modelCache.get(cacheKey);
        const clonedModel = originalModel.clone();
        
        // Apply tank-specific transforms
        this._applyTankTransforms(clonedModel, tankType, position);
        
        return clonedModel;
    }

    /**
     * L·∫•y clone c·ªßa rock model t·ª´ cache
     * @param {string} rockType - Lo·∫°i rock (rock09, rock13)
     * @param {THREE.Vector3} position - V·ªã tr√≠ ƒë·∫∑t rock
     * @param {number} scale - Scale c·ªßa rock
     * @param {number} rotation - Rotation c·ªßa rock
     * @returns {THREE.Group|null} - Clone c·ªßa rock model
     */
    getRockModel(rockType, position = new THREE.Vector3(0, 0, 0), scale = 1, rotation = 0) {
        const cacheKey = `rock_${rockType}`;
        
        if (!this.modelCache.has(cacheKey)) {
            console.error(`‚ùå Rock model ${rockType} ch∆∞a ƒë∆∞·ª£c preload!`);
            return null;
        }
        
        const originalModel = this.modelCache.get(cacheKey);
        const clonedModel = originalModel.clone();
        
        clonedModel.position.copy(position);
        clonedModel.scale.setScalar(scale);
        clonedModel.rotation.y = rotation;
        
        return clonedModel;
    }

    /**
     * L·∫•y clone c·ªßa tree model t·ª´ cache
     * @param {string} treeType - Lo·∫°i tree (tree01)
     * @param {THREE.Vector3} position - V·ªã tr√≠ ƒë·∫∑t tree
     * @param {number} scale - Scale c·ªßa tree
     * @param {number} rotation - Rotation c·ªßa tree
     * @returns {THREE.Group|null} - Clone c·ªßa tree model
     */
    getTreeModel(treeType, position = new THREE.Vector3(0, 0, 0), scale = 1, rotation = 0) {
        const cacheKey = `tree_${treeType}`;
        
        if (!this.modelCache.has(cacheKey)) {
            console.error(`‚ùå Tree model ${treeType} ch∆∞a ƒë∆∞·ª£c preload!`);
            return null;
        }
        
        const originalModel = this.modelCache.get(cacheKey);
        const clonedModel = originalModel.clone();
        
        clonedModel.position.copy(position);
        clonedModel.scale.setScalar(scale);
        clonedModel.rotation.y = rotation;
        
        return clonedModel;
    }

    /**
     * L·∫•y clone c·ªßa barrel model t·ª´ cache
     * @param {string} barrelType - Lo·∫°i barrel (barrel)
     * @param {THREE.Vector3} position - V·ªã tr√≠ ƒë·∫∑t barrel
     * @param {number} scale - Scale c·ªßa barrel
     * @param {number} rotation - Rotation c·ªßa barrel
     * @returns {THREE.Group|null} - Clone c·ªßa barrel model
     */
    getBarrelModel(barrelType, position = new THREE.Vector3(0, 0, 0), scale = 1, rotation = 0) {
        const cacheKey = `barrel`;
        
        if (!this.modelCache.has(cacheKey)) {
            console.error(`‚ùå Barrel model ch∆∞a ƒë∆∞·ª£c preload!`);
            return null;
        }
        
        const originalModel = this.modelCache.get(cacheKey);
        const clonedModel = originalModel.clone();
        
        clonedModel.position.copy(position);
        clonedModel.scale.setScalar(scale);
        clonedModel.rotation.y = rotation;
        
        return clonedModel;
    }

    /**
     * Apply tank-specific transforms (t∆∞∆°ng t·ª± nh∆∞ trong loadTankModel c≈©)
     * @private
     * @param {THREE.Group} model - Tank model
     * @param {Object} tankType - TANKTYPE object
     * @param {THREE.Vector3} position - V·ªã tr√≠ tank
     */
    _applyTankTransforms(model, tankType, position) {
        if (tankType === TANKTYPE.V001) {
            model.position.set(position.x, position.y, position.z);
            model.scale.set(3.5, 3.5, 3.5);
        } else if (tankType === TANKTYPE.V003) {
            model.position.set(position.x, position.y - 1, position.z);
            model.scale.set(3.0, 3.0, 3.0);
        } else if (tankType === TANKTYPE.V002) {
            model.position.set(position.x, position.y - 1, position.z);
            model.scale.set(2.0, 2.0, 2.0);
        } else if (tankType === TANKTYPE.V004) {
            model.position.set(position.x, position.y - 1, position.z);
            model.scale.set(2.4, 2.4, 2.4);
        } else if (tankType === TANKTYPE.V005) {
            model.position.set(position.x, position.y - 1, position.z);
            model.scale.set(1.4, 1.4, 1.4);
        } else if (tankType === TANKTYPE.V006) {
            model.position.set(position.x, position.y - 1, position.z);
            model.scale.set(1.2, 1.2, 1.2);
        } else {
            model.position.copy(position);
            model.scale.set(3.5, 3.5, 3.5);
        }
    }

    /**
     * Ki·ªÉm tra xem model ƒë√£ ƒë∆∞·ª£c cache ch∆∞a
     * @param {string} cacheKey - Key c·ªßa model trong cache
     * @returns {boolean} - True n·∫øu model ƒë√£ c√≥ trong cache
     */
    isModelCached(cacheKey) {
        return this.modelCache.has(cacheKey);
    }

    getCacheInfo() {
        return {
            totalModels: this.modelCache.size,
            modelKeys: Array.from(this.modelCache.keys()),
            isPreloaded: this.isPreloaded,
            memoryUsage: this._estimateMemoryUsage()
        };
    }

    _estimateMemoryUsage() {
        let totalVertices = 0;
        let totalTextures = 0;
        
        this.modelCache.forEach((model, key) => {
            model.traverse((child) => {
                if (child.isMesh && child.geometry) {
                    totalVertices += child.geometry.attributes.position.count;
                }
                if (child.material && child.material.map) {
                    totalTextures++;
                }
            });
        });
        
        const estimatedMB = (totalVertices * 48 + totalTextures * 2) / (1024 * 1024);
        return `~${estimatedMB.toFixed(1)} MB`;
    }

    /**
     * Clear cache v√† gi·∫£i ph√≥ng memory
     */
    clearCache() {
        console.log("üßπ Clearing model cache...");
        
        this.modelCache.forEach((model, key) => {
            model.traverse((child) => {
                if (child.isMesh) {
                    if (child.geometry) child.geometry.dispose();
                    if (child.material) {
                        if (Array.isArray(child.material)) {
                            child.material.forEach(material => material.dispose());
                        } else {
                            child.material.dispose();
                        }
                    }
                }
            });
        });
        
        this.modelCache.clear();
        this.loadingPromises.clear();
        this.isPreloaded = false;
        
        console.log("‚úÖ Model cache cleared");
    }

    /**
     * Dispose instance
     */
    dispose() {
        this.clearCache();
        ModelLoader.instance = null;
    }
}

export { ModelLoader }; 